while (substring(L_str, r, r) != c) {
r = r - 1
}
r = F_str[[c]][1] + as.numeric(substring(rank, j, j)) + 1
i = i - 1
}
return(r - l)
}
T_str = "Tomorrow_and_tomorrow_and_tomorrow"
L_str = bwt(T_str, printTables)[[1]]
countMatches(L_str, "omorrow")
countMatches = function(L_str, p_str) {
r        = rankbwt(L_str)
rank     = r[[1]]
rankTots = r[[2]]
F_str    = firstCol(rankTots)[[2]]
# Extract last (one) character
n_last = 1
p_str_lst = substr(p_str, nchar(p_str) - n_last + 1, nchar(p_str))
l = F_str[[p_str_lst]][1]
r = F_str[[p_str_lst]][2]
i = nchar(p_str)-1
while (i > 0 & r > l) {
# Get ith character of p_str
c = substring(p_str, i, i)
# scan from left, looking for occurrences of c
j = l
print(j)
while (j < r-1) {
if (substring(L_str, j, j) == c) {
l = F_str[[c]][1] + as.numeric(substring(rank, j, j))
break
}
j = j + 1
}
if (j == r) {
l = r
# no occurrences -> no match
break
}
r = r - 1
while (substring(L_str, r, r) != c) {
r = r - 1
}
r = F_str[[c]][1] + as.numeric(substring(rank, j, j)) + 1
i = i - 1
}
return(r - l)
}
T_str = "Tomorrow_and_tomorrow_and_tomorrow"
L_str = bwt(T_str, printTables)[[1]]
countMatches(L_str, "omorrow")
countMatches = function(L_str, p_str) {
r        = rankbwt(L_str)
rank     = r[[1]]
rankTots = r[[2]]
F_str    = firstCol(rankTots)[[2]]
# Extract last (one) character
n_last = 1
p_str_lst = substr(p_str, nchar(p_str) - n_last + 1, nchar(p_str))
l = F_str[[p_str_lst]][1]
r = F_str[[p_str_lst]][2]
i = nchar(p_str)-1
while (i > 0 & r > l) {
# Get ith character of p_str
c = substring(p_str, i, i)
# scan from left, looking for occurrences of c
j = l
print(j)
while (j < r) {
if (substring(L_str, j, j) == c) {
l = F_str[[c]][1] + as.numeric(substring(rank, j, j)) + 1
break
}
j = j + 1
}
if (j == r) {
l = r
# no occurrences -> no match
break
}
r = r - 1
while (substring(L_str, r, r) != c) {
r = r - 1
}
r = F_str[[c]][1] + as.numeric(substring(rank, j, j)) + 1
i = i - 1
}
return(r - l)
}
T_str = "Tomorrow_and_tomorrow_and_tomorrow"
L_str = bwt(T_str, printTables)[[1]]
countMatches(L_str, "omorrow")
countMatches = function(L_str, p_str) {
r        = rankbwt(L_str)
rank     = r[[1]]
rankTots = r[[2]]
F_str    = firstCol(rankTots)[[2]]
# Extract last (one) character
n_last = 1
p_str_lst = substr(p_str, nchar(p_str) - n_last + 1, nchar(p_str))
l = F_str[[p_str_lst]][1]
r = F_str[[p_str_lst]][2]
i = nchar(p_str)-1
while (i > 0 & r > l) {
# Get ith character of p_str
c = substring(p_str, i, i)
# scan from left, looking for occurrences of c
j = l
print(j)
while (j < r) {
if (substring(L_str, j, j) == c) {
l = F_str[[c]][1] + as.numeric(substring(rank, j, j)) -1
break
}
j = j + 1
}
if (j == r) {
l = r
# no occurrences -> no match
break
}
r = r - 1
while (substring(L_str, r, r) != c) {
r = r - 1
}
r = F_str[[c]][1] + as.numeric(substring(rank, j, j)) + 1
i = i - 1
}
return(r - l)
}
T_str = "Tomorrow_and_tomorrow_and_tomorrow"
L_str = bwt(T_str, printTables)[[1]]
countMatches(L_str, "omorrow")
countMatches = function(L_str, p_str) {
r        = rankbwt(L_str)
rank     = r[[1]]
rankTots = r[[2]]
F_str    = firstCol(rankTots)[[2]]
# Extract last (one) character
n_last = 1
p_str_lst = substr(p_str, nchar(p_str) - n_last + 1, nchar(p_str))
l = F_str[[p_str_lst]][1]
r = F_str[[p_str_lst]][2]
i = nchar(p_str)-1
while (i > 0 & r > l) {
# Get ith character of p_str
c = substring(p_str, i, i)
# scan from left, looking for occurrences of c
j = l
print(as.numeric(substring(rank, j, j)))
while (j < r) {
if (substring(L_str, j, j) == c) {
l = F_str[[c]][1] + as.numeric(substring(rank, j, j))
break
}
j = j + 1
}
if (j == r) {
l = r
# no occurrences -> no match
break
}
r = r - 1
while (substring(L_str, r, r) != c) {
r = r - 1
}
r = F_str[[c]][1] + as.numeric(substring(rank, j, j)) + 1
i = i - 1
}
return(r - l)
}
T_str = "Tomorrow_and_tomorrow_and_tomorrow"
L_str = bwt(T_str, printTables)[[1]]
countMatches(L_str, "omorrow")
countMatches = function(L_str, p_str) {
r        = rankbwt(L_str)
rank     = r[[1]]
rankTots = r[[2]]
F_str    = firstCol(rankTots)[[2]]
# Extract last (one) character
n_last = 1
p_str_lst = substr(p_str, nchar(p_str) - n_last + 1, nchar(p_str))
l = F_str[[p_str_lst]][1]
r = F_str[[p_str_lst]][2]
i = nchar(p_str)-1
while (i > 0 & r > l) {
# Get ith character of p_str
c = substring(p_str, i, i)
# scan from left, looking for occurrences of c
j = l
print(">>>")
print(j)
print(as.numeric(substring(rank, j, j)))
while (j < r) {
if (substring(L_str, j, j) == c) {
l = F_str[[c]][1] + as.numeric(substring(rank, j, j))
break
}
j = j + 1
}
if (j == r) {
l = r
# no occurrences -> no match
break
}
r = r - 1
while (substring(L_str, r, r) != c) {
r = r - 1
}
r = F_str[[c]][1] + as.numeric(substring(rank, j, j)) + 1
i = i - 1
}
return(r - l)
}
T_str = "Tomorrow_and_tomorrow_and_tomorrow"
L_str = bwt(T_str, printTables)[[1]]
countMatches(L_str, "omorrow")
countMatches = function(L_str, p_str) {
r        = rankbwt(L_str)
rank     = r[[1]]
rankTots = r[[2]]
F_str    = firstCol(rankTots)[[2]]
print(rank)
# Extract last (one) character
n_last = 1
p_str_lst = substr(p_str, nchar(p_str) - n_last + 1, nchar(p_str))
l = F_str[[p_str_lst]][1]
r = F_str[[p_str_lst]][2]
i = nchar(p_str)-1
while (i > 0 & r > l) {
# Get ith character of p_str
c = substring(p_str, i, i)
# scan from left, looking for occurrences of c
j = l
print(">>>")
print(j)
print(as.numeric(substring(rank, j, j)))
while (j < r) {
if (substring(L_str, j, j) == c) {
l = F_str[[c]][1] + as.numeric(substring(rank, j, j))
break
}
j = j + 1
}
if (j == r) {
l = r
# no occurrences -> no match
break
}
r = r - 1
while (substring(L_str, r, r) != c) {
r = r - 1
}
r = F_str[[c]][1] + as.numeric(substring(rank, j, j)) + 1
i = i - 1
}
return(r - l)
}
T_str = "Tomorrow_and_tomorrow_and_tomorrow"
L_str = bwt(T_str, printTables)[[1]]
countMatches(L_str, "omorrow")
F_str[["a"]][1]
r        = rankbwt(L_str)
rank     = r[[1]]
rankTots = r[[2]]
r        = rankbwt(L_str)
rank     = r[[1]]
rankTots = r[[2]]
substring(rank, 32, 32)
substring(rank, nchar(rank)-32, nchar(rank)-32)
countMatches = function(L_str, p_str) {
r        = rankbwt(L_str)
rank     = r[[1]]
rankTots = r[[2]]
F_str    = firstCol(rankTots)[[2]]
print(rank)
# Extract last (one) character
n_last = 1
p_str_lst = substr(p_str, nchar(p_str) - n_last + 1, nchar(p_str))
l = F_str[[p_str_lst]][1]
r = F_str[[p_str_lst]][2]
i = nchar(p_str)-1
while (i > 0 & r > l) {
# Get ith character of p_str
c = substring(p_str, i, i)
# scan from left, looking for occurrences of c
j = l
print(">>>")
print(j)
print(as.numeric(substring(rank, j, j)))
while (j < r) {
if (substring(L_str, j, j) == c) {
l = F_str[[c]][1] + as.numeric(substring(rank, nchar(rank)-j, nchar(rank)-j))
break
}
j = j + 1
}
if (j == r) {
l = r
# no occurrences -> no match
break
}
r = r - 1
while (substring(L_str, r, r) != c) {
r = r - 1
}
r = F_str[[c]][1] + as.numeric(substring(rank, nchar(rank)-j, nchar(rank)-j)) + 1
i = i - 1
}
return(r - l)
}
T_str = "Tomorrow_and_tomorrow_and_tomorrow"
L_str = bwt(T_str, printTables)[[1]]
countMatches(L_str, "omorrow")
countMatches = function(L_str, p_str) {
r        = rankbwt(L_str)
rank     = r[[1]]
rankTots = r[[2]]
F_str    = firstCol(rankTots)[[2]]
print(rank)
# Extract last (one) character
n_last = 1
p_str_lst = substr(p_str, nchar(p_str) - n_last + 1, nchar(p_str))
l = F_str[[p_str_lst]][1]
r = F_str[[p_str_lst]][2]
i = nchar(p_str)-1
while (i > 0 & r > l) {
# Get ith character of p_str
c = substring(p_str, i, i)
# scan from left, looking for occurrences of c
j = l
print(">>>")
print(j)
print(as.numeric(substring(rank, nchar(rank)-j, nchar(rank)-j)))
while (j < r) {
if (substring(L_str, j, j) == c) {
l = F_str[[c]][1] + as.numeric(substring(rank, nchar(rank)-j, nchar(rank)-j))
break
}
j = j + 1
}
if (j == r) {
l = r
# no occurrences -> no match
break
}
r = r - 1
while (substring(L_str, r, r) != c) {
r = r - 1
}
r = F_str[[c]][1] + as.numeric(substring(rank, nchar(rank)-j, nchar(rank)-j)) + 1
i = i - 1
}
return(r - l)
}
T_str = "Tomorrow_and_tomorrow_and_tomorrow"
L_str = bwt(T_str, printTables)[[1]]
countMatches(L_str, "omorrow")
countMatches = function(L_str, p_str) {
r        = rankbwt(L_str)
rank     = r[[1]]
rankTots = r[[2]]
F_str    = firstCol(rankTots)[[2]]
print(rank)
# Extract last (one) character
n_last = 1
p_str_lst = substr(p_str, nchar(p_str) - n_last + 1, nchar(p_str))
l = F_str[[p_str_lst]][1]
r = F_str[[p_str_lst]][2]
i = nchar(p_str)-1
while (i > 0 & r > l) {
# Get ith character of p_str
c = substring(p_str, i, i)
# scan from left, looking for occurrences of c
j = l
z = nchar(rank)
print(">>>")
print(j)
print(as.numeric(substring(rank, z-j, z-j)))
while (j < r) {
if (substring(L_str, j, j) == c) {
l = F_str[[c]][1] + as.numeric(substring(rank, j, j))
break
}
j = j + 1
}
if (j == r) {
l = r
# no occurrences -> no match
break
}
r = r - 1
while (substring(L_str, r, r) != c) {
r = r - 1
}
r = F_str[[c]][1] + as.numeric(substring(rank, j, j)) + 1
i = i - 1
}
return(r - l)
}
T_str = "Tomorrow_and_tomorrow_and_tomorrow"
L_str = bwt(T_str, printTables)[[1]]
countMatches(L_str, "omorrow")
countMatches = function(L_str, p_str) {
r        = rankbwt(L_str)
rank     = r[[1]]
rankTots = r[[2]]
F_str    = firstCol(rankTots)[[2]]
print(rank)
# Extract last (one) character
n_last = 1
p_str_lst = substr(p_str, nchar(p_str) - n_last + 1, nchar(p_str))
l = F_str[[p_str_lst]][1]
r = F_str[[p_str_lst]][2]
i = nchar(p_str)-1
while (i > 0 & r > l) {
# Get ith character of p_str
c = substring(p_str, i, i)
# scan from left, looking for occurrences of c
j = l
z = nchar(rank)
print(">>>")
print(j)
print(as.numeric(substring(rank, j, j)))
while (j < r) {
if (substring(L_str, j, j) == c) {
l = F_str[[c]][1] + as.numeric(substring(rank, j, j))
break
}
j = j + 1
}
if (j == r) {
l = r
# no occurrences -> no match
break
}
r = r - 1
while (substring(L_str, r, r) != c) {
r = r - 1
}
r = F_str[[c]][1] + as.numeric(substring(rank, j, j)) + 1
i = i - 1
}
return(r - l)
}
T_str = "Tomorrow_and_tomorrow_and_tomorrow"
L_str = bwt(T_str, printTables)[[1]]
countMatches(L_str, "omorrow")
countMatches = function(L_str, p_str) {
r        = rankbwt(L_str)
rank     = r[[1]]
rankTots = r[[2]]
F_str    = firstCol(rankTots)[[2]]
z = nchar(rank)
print(z)
print(rank)
# Extract last (one) character
n_last = 1
p_str_lst = substr(p_str, nchar(p_str) - n_last + 1, nchar(p_str))
l = F_str[[p_str_lst]][1]
r = F_str[[p_str_lst]][2]
i = nchar(p_str)-1
while (i > 0 & r > l) {
# Get ith character of p_str
c = substring(p_str, i, i)
# scan from left, looking for occurrences of c
j = l
print(">>>")
print(j)
print(as.numeric(substring(rank, j, j)))
while (j < r) {
if (substring(L_str, j, j) == c) {
l = F_str[[c]][1] + as.numeric(substring(rank, j, j))
break
}
j = j + 1
}
if (j == r) {
l = r
# no occurrences -> no match
break
}
r = r - 1
while (substring(L_str, r, r) != c) {
r = r - 1
}
r = F_str[[c]][1] + as.numeric(substring(rank, j, j)) + 1
i = i - 1
}
return(r - l)
}
T_str = "Tomorrow_and_tomorrow_and_tomorrow"
L_str = bwt(T_str, printTables)[[1]]
countMatches(L_str, "omorrow")
ibwt("w!wwdd__nnoooaattTmmmrrrrrrooo__ooo")
ibwt("wwwdd__nnoooaattTmmmrrrrrrooo__ooo")
ibwt("ww!wdd__nnoooaattTmmmrrrrrrooo__ooo")
T_str = "Tomorrow_and_tomorrow_and_tomorrow" #"abaaba"
printTables = FALSE
L_str = bwt(T_str, printTables)[[1]]
r        = rankbwt(L_str)
rank     = r[[1]]
rankTots = r[[2]]
F_str    = firstCol(rankTots)[[1]]
print(T_str)
print(L_str)
print(rank)
print(F_str)
ibwt("wwwdd__nnoooaattTmmmrrrrrrooo__!ooo")
ibwt("wwwdd__nnoooaattTmmmrrrrrroo!o__ooo")
ibwt("wwwdd__nnoooaattTmmmrrrrrrooo__!ooo")
