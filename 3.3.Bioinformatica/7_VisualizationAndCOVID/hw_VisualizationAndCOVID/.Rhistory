# dim(count_results_CoV002)
# dim(count_results_SARS004)
# length(intersect(rownames(count_results_CoV002),rownames(count_results_SARS004)))
# plotMA(count_results_CoV002)
# plotMA(count_results_SARS004)
# plotMA(count_results_svRNA184)
# plotMA(count_results_X3_9)
par(mfrow=c(1,4))
plotMA(count_results_CoV002, main="CoV002")
plotMA(count_results_SARS004, main="SARS004")
plotMA(count_results_svRNA184, main="svRNA184")
plotMA(count_results_X3_9, main="X3_9")
# Clear all objects (from the workspace)
rm(list = ls())
# Suppress Warning messages
options(warn = -1)
# Turn off scientific notation like 1e+06
options(stringsAsFactors = F)
# INSTALL with:
# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("GEOquery")
# BiocManager::install("DESeq2")
# BiocManager::install("limma")
# library(devtools)
# install_github("tpq/exprso")
# LOAD Libs
library(dplyr)
library(tidyverse)
library(DESeq2)
library(limma)
# LOAD provided functions
source("./script_ejercicios.R")
datos <- load("./GSE147507_datos_covid.Rdata")
names(datos_covid)
dim(datos_covid)
head(datos_covid)
# FILTRAR genes - conteos
# Para cada gen, contar el número de muestras con mayor a 5 conteos
datos_covid_filter <-
apply(datos_covid, 1, function(x)
length(which(x >= 5)))
table(datos_covid_filter)
# Filtrar genes con menor a 2 muestras con más de 5 conteos
datos_covid <- datos_covid[which(datos_covid_filter >= 2),]
# Let's take a LOOK
names(datos_covid)
dim(datos_covid)
head(datos_covid)
SARS004_mock  = datos_covid[,grep('SARS004_mock',  colnames(datos_covid))]
SARS004_CoV2  = datos_covid[,grep('SARS004_CoV2',  colnames(datos_covid))]
CoV002.mock   = datos_covid[,grep('CoV002.mock',   colnames(datos_covid))]
CoV002.CoV2   = datos_covid[,grep('CoV002.CoV2',   colnames(datos_covid))]
svRNA184.mock = datos_covid[,grep('svRNA184.mock', colnames(datos_covid))]
svRNA184.RSV  = datos_covid[,grep('svRNA184.RSV',  colnames(datos_covid))]
X3_9_mock     = datos_covid[,grep('X3_9_mock',     colnames(datos_covid))]
X3_9_wt       = datos_covid[,grep('X3_9_wt',       colnames(datos_covid))]
dds <- DESeqDataSetFromMatrix(datos_covid)
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design= ~ batch + condition)
dds <- DESeqDataSetFromMatrix(colData = datos_covid)
dds <- DESeqDataSetFromMatrix(countData = datos_covid,
colData = row.names(datos_covid))
# Clear all objects (from the workspace)
rm(list = ls())
# Suppress Warning messages
options(warn = -1)
# Turn off scientific notation like 1e+06
options(stringsAsFactors = F)
# INSTALL with:
# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("GEOquery")
# BiocManager::install("DESeq2")
# BiocManager::install("limma")
# library(devtools)
# install_github("tpq/exprso")
# LOAD Libs
library(dplyr)
library(tidyverse)
library(DESeq2)
library(limma)
# LOAD provided functions
source("./script_ejercicios.R")
datos <- load("./GSE147507_datos_covid.Rdata")
names(datos_covid)
dim(datos_covid)
head(datos_covid)
# FILTRAR genes - conteos
# Para cada gen, contar el número de muestras con mayor a 5 conteos
datos_covid_filter <-
apply(datos_covid, 1, function(x)
length(which(x >= 5)))
table(datos_covid_filter)
# Filtrar genes con menor a 2 muestras con más de 5 conteos
datos_covid <- datos_covid[which(datos_covid_filter >= 2),]
# Let's take a LOOK
names(datos_covid)
dim(datos_covid)
head(datos_covid)
SARS004_mock  = datos_covid[,grep('SARS004_mock',  colnames(datos_covid))]
SARS004_CoV2  = datos_covid[,grep('SARS004_CoV2',  colnames(datos_covid))]
CoV002.mock   = datos_covid[,grep('CoV002.mock',   colnames(datos_covid))]
CoV002.CoV2   = datos_covid[,grep('CoV002.CoV2',   colnames(datos_covid))]
svRNA184.mock = datos_covid[,grep('svRNA184.mock', colnames(datos_covid))]
svRNA184.RSV  = datos_covid[,grep('svRNA184.RSV',  colnames(datos_covid))]
X3_9_mock     = datos_covid[,grep('X3_9_mock',     colnames(datos_covid))]
X3_9_wt       = datos_covid[,grep('X3_9_wt',       colnames(datos_covid))]
tbl_merge = merge(SARS004_mock, SARS004_CoV2, by="row.names", all=TRUE)
rownames(tbl_merge) <- tbl_merge[,1] # First column contains the row names
tbl_merge = tbl_merge %>% select(-contains(c("Row.names"))) # DROP extra data
print(head(tbl_merge))
# Conteos
aux_classes = rep(0, times = ncol(tbl_merge)) # CLASSIFY infected samples as 0s
aux_classes[grep(pattern = "mock", x = colnames(tbl_merge))] = 1 # and mocks as 1s
aux_classes
colnames(tbl_merge)
count_results_SARS004 = DESeq_func(matrix_c = tbl_merge, classes_c = aux_classes)
count_results_SARS004 = count_results_SARS004[order(count_results_SARS004$pvalue),]
summary(count_results_SARS004)
head(count_results_SARS004)
# HISTOGRAM
pvals = count_results_SARS004["pvalue"]
hist(
pvals[, 1],
prob = TRUE,
col = "black",
border = "white",
xlab = "scores",
breaks = 100
)
box(bty = "l")
# Draw density function (assuming normal dist)
score_mean = mean(pvals[, 1])
score_sd   = sd(pvals[, 1])
curve(
dnorm(x, mean = score_mean, sd = score_sd),
add = TRUE,
col = "red",
lwd = 2
)
# Let's take a look to some genes
# count_mat_28v0["ENSG00000128567.16_PODXL",]
# count_mat_28v0["ENSG00000185559.14_DLK1",]
tbl_merge = merge(CoV002.mock, CoV002.CoV2, by="row.names", all=TRUE)
rownames(tbl_merge) <- tbl_merge[,1] # First column contains the row names
tbl_merge = tbl_merge %>% select(-contains(c("Row.names"))) # DROP extra data
print(head(tbl_merge))
# Conteos
aux_classes = rep(0, times = ncol(tbl_merge)) # CLASSIFY infected samples as 0s
aux_classes[grep(pattern = "mock", x = colnames(tbl_merge))] = 1 # and mocks as 1s
aux_classes
colnames(tbl_merge)
count_results_CoV002 = DESeq_func(matrix_c = tbl_merge, classes_c = aux_classes)
count_results_CoV002 = count_results_CoV002[order(count_results_CoV002$pvalue),]
summary(count_results_CoV002)
head(count_results_CoV002)
# HISTOGRAM
pvals = count_results_CoV002["pvalue"]
hist(
pvals[, 1],
prob = TRUE,
col = "black",
border = "white",
xlab = "scores",
breaks = 100
)
box(bty = "l")
# Draw density function (assuming normal dist)
score_mean = mean(pvals[, 1])
score_sd   = sd(pvals[, 1])
curve(
dnorm(x, mean = score_mean, sd = score_sd),
add = TRUE,
col = "red",
lwd = 2
)
# Let's take a look to some genes
# count_mat_28v0["ENSG00000128567.16_PODXL",]
# count_mat_28v0["ENSG00000185559.14_DLK1",]
tbl_merge = merge(svRNA184.mock, svRNA184.RSV, by="row.names", all=TRUE)
rownames(tbl_merge) <- tbl_merge[,1] # First column contains the row names
tbl_merge = tbl_merge %>% select(-contains(c("Row.names"))) # DROP extra data
print(head(tbl_merge))
# Conteos
aux_classes = rep(0, times = ncol(tbl_merge)) # CLASSIFY infected samples as 0s
aux_classes[grep(pattern = "mock", x = colnames(tbl_merge))] = 1 # and mocks as 1s
aux_classes
colnames(tbl_merge)
count_results_svRNA184 = DESeq_func(matrix_c = tbl_merge, classes_c = aux_classes)
count_results_svRNA184 = count_results_svRNA184[order(count_results_svRNA184$pvalue),]
summary(count_results_svRNA184)
head(count_results_svRNA184)
# HISTOGRAM
pvals = count_results_svRNA184["pvalue"]
hist(
pvals[, 1],
prob = TRUE,
col = "black",
border = "white",
xlab = "scores",
breaks = 100
)
box(bty = "l")
# Draw density function (assuming normal dist)
score_mean = mean(pvals[, 1])
score_sd   = sd(pvals[, 1])
curve(
dnorm(x, mean = score_mean, sd = score_sd),
add = TRUE,
col = "red",
lwd = 2
)
# Let's take a look to some genes
# count_mat_28v0["ENSG00000128567.16_PODXL",]
# count_mat_28v0["ENSG00000185559.14_DLK1",]
tbl_merge = merge(X3_9_mock, X3_9_wt, by="row.names", all=TRUE)
rownames(tbl_merge) <- tbl_merge[,1] # First column contains the row names
tbl_merge = tbl_merge %>% select(-contains(c("Row.names"))) # DROP extra data
print(head(tbl_merge))
# Conteos
aux_classes = rep(0, times = ncol(tbl_merge)) # CLASSIFY infected samples as 0s
aux_classes[grep(pattern = "mock", x = colnames(tbl_merge))] = 1 # and mocks as 1s
aux_classes
colnames(tbl_merge)
count_results_X3_9 = DESeq_func(matrix_c = tbl_merge, classes_c = aux_classes)
count_results_X3_9 = count_results_X3_9[order(count_results_X3_9$pvalue),]
summary(count_results_X3_9)
head(count_results_X3_9)
# HISTOGRAM
pvals = count_results_X3_9["pvalue"]
hist(
pvals[, 1],
prob = TRUE,
col = "black",
border = "white",
xlab = "scores",
breaks = 100
)
box(bty = "l")
# Draw density function (assuming normal dist)
score_mean = mean(pvals[, 1])
score_sd   = sd(pvals[, 1])
curve(
dnorm(x, mean = score_mean, sd = score_sd),
add = TRUE,
col = "red",
lwd = 2
)
# Let's take a look to some genes
# count_mat_28v0["ENSG00000128567.16_PODXL",]
# count_mat_28v0["ENSG00000185559.14_DLK1",]
# dim(count_results_CoV002)
# dim(count_results_SARS004)
# length(intersect(rownames(count_results_CoV002),rownames(count_results_SARS004)))
# plotMA(count_results_CoV002)
# plotMA(count_results_SARS004)
# plotMA(count_results_svRNA184)
# plotMA(count_results_X3_9)
par(mfrow=c(1,4))
plotMA(count_results_CoV002, main="CoV002")
plotMA(count_results_SARS004, main="SARS004")
plotMA(count_results_svRNA184, main="svRNA184")
plotMA(count_results_X3_9, main="X3_9")
# dim(count_results_CoV002)
# dim(count_results_SARS004)
# length(intersect(rownames(count_results_CoV002),rownames(count_results_SARS004)))
# plotMA(count_results_CoV002)
# plotMA(count_results_SARS004)
# plotMA(count_results_svRNA184)
# plotMA(count_results_X3_9)
heatmap(count_results_CoV002)
# dim(count_results_CoV002)
# dim(count_results_SARS004)
# length(intersect(rownames(count_results_CoV002),rownames(count_results_SARS004)))
# plotMA(count_results_CoV002)
# plotMA(count_results_SARS004)
# plotMA(count_results_svRNA184)
# plotMA(count_results_X3_9)
heatmap(as.matrix(count_results_CoV002))
# dim(count_results_CoV002)
# dim(count_results_SARS004)
# length(intersect(rownames(count_results_CoV002),rownames(count_results_SARS004)))
# plotMA(count_results_CoV002)
# plotMA(count_results_SARS004)
# plotMA(count_results_svRNA184)
# plotMA(count_results_X3_9)
heatmap(as.matrix(datos_covid)
# dim(count_results_CoV002)
# dim(count_results_SARS004)
# length(intersect(rownames(count_results_CoV002),rownames(count_results_SARS004)))
# plotMA(count_results_CoV002)
# plotMA(count_results_SARS004)
# plotMA(count_results_svRNA184)
# plotMA(count_results_X3_9)
heatmap(as.matrix(datos_covid))
plotMA(count_results_CoV002)
plotMA(count_results_SARS004)
plotMA(count_results_svRNA184)
plotMA(count_results_X3_9)
heatmap(as.matrix(datos_covid))
plotDispEsts(datos_covid)
plotDispEsts(as.matrix(datos_covid))
plotMA(count_results_CoV002,main="CoV002")
plotMA(count_results_SARS004)
plotMA(count_results_svRNA184)
plotMA(count_results_X3_9)
# heatmap(as.matrix(datos_covid))
boxplot(datos_covid)
plotDispEsts(as.matrix(datos_covid))
boxplot(log10(datos_covid), range=0, las=2)
plotDispEsts(as.matrix(datos_covid))
meanSdPlot(datos_covid)
library("vsn")
install.packages("vsn")
plotCounts(datos_covid)
# Clear all objects (from the workspace)
rm(list = ls())
# Suppress Warning messages
options(warn = -1)
# Turn off scientific notation like 1e+06
options(stringsAsFactors = F)
# INSTALL with:
# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("GEOquery")
# BiocManager::install("DESeq2")
# BiocManager::install("limma")
# library(devtools)
# install_github("tpq/exprso")
# LOAD Libs
library(dplyr)
library(tidyverse)
library(DESeq2)
library(limma)
# LOAD provided functions
source("./script_ejercicios.R")
datos <- load("./GSE147507_datos_covid.Rdata")
names(datos_covid)
dim(datos_covid)
head(datos_covid)
# FILTRAR genes - conteos
# Para cada gen, contar el número de muestras con mayor a 5 conteos
datos_covid_filter <-
apply(datos_covid, 1, function(x)
length(which(x >= 5)))
table(datos_covid_filter)
# Filtrar genes con menor a 2 muestras con más de 5 conteos
datos_covid <- datos_covid[which(datos_covid_filter >= 2),]
# Let's take a LOOK
names(datos_covid)
dim(datos_covid)
head(datos_covid)
SARS004_mock  = datos_covid[,grep('SARS004_mock',  colnames(datos_covid))]
SARS004_CoV2  = datos_covid[,grep('SARS004_CoV2',  colnames(datos_covid))]
CoV002.mock   = datos_covid[,grep('CoV002.mock',   colnames(datos_covid))]
CoV002.CoV2   = datos_covid[,grep('CoV002.CoV2',   colnames(datos_covid))]
svRNA184.mock = datos_covid[,grep('svRNA184.mock', colnames(datos_covid))]
svRNA184.RSV  = datos_covid[,grep('svRNA184.RSV',  colnames(datos_covid))]
X3_9_mock     = datos_covid[,grep('X3_9_mock',     colnames(datos_covid))]
X3_9_wt       = datos_covid[,grep('X3_9_wt',       colnames(datos_covid))]
tbl_merge = merge(SARS004_mock, SARS004_CoV2, by="row.names", all=TRUE)
rownames(tbl_merge) <- tbl_merge[,1] # First column contains the row names
tbl_merge = tbl_merge %>% select(-contains(c("Row.names"))) # DROP extra data
print(head(tbl_merge))
# Conteos
aux_classes = rep(0, times = ncol(tbl_merge)) # CLASSIFY infected samples as 0s
aux_classes[grep(pattern = "mock", x = colnames(tbl_merge))] = 1 # and mocks as 1s
aux_classes
colnames(tbl_merge)
count_results_SARS004 = DESeq_func(matrix_c = tbl_merge, classes_c = aux_classes)
count_results_SARS004 = count_results_SARS004[order(count_results_SARS004$pvalue),]
summary(count_results_SARS004)
head(count_results_SARS004)
# HISTOGRAM
pvals = count_results_SARS004["pvalue"]
hist(
pvals[, 1],
prob = TRUE,
col = "black",
border = "white",
xlab = "scores",
breaks = 100
)
box(bty = "l")
# Draw density function (assuming normal dist)
score_mean = mean(pvals[, 1])
score_sd   = sd(pvals[, 1])
curve(
dnorm(x, mean = score_mean, sd = score_sd),
add = TRUE,
col = "red",
lwd = 2
)
# Let's take a look to some genes
# count_mat_28v0["ENSG00000128567.16_PODXL",]
# count_mat_28v0["ENSG00000185559.14_DLK1",]
tbl_merge = merge(CoV002.mock, CoV002.CoV2, by="row.names", all=TRUE)
rownames(tbl_merge) <- tbl_merge[,1] # First column contains the row names
tbl_merge = tbl_merge %>% select(-contains(c("Row.names"))) # DROP extra data
print(head(tbl_merge))
# Conteos
aux_classes = rep(0, times = ncol(tbl_merge)) # CLASSIFY infected samples as 0s
aux_classes[grep(pattern = "mock", x = colnames(tbl_merge))] = 1 # and mocks as 1s
aux_classes
colnames(tbl_merge)
count_results_CoV002 = DESeq_func(matrix_c = tbl_merge, classes_c = aux_classes)
count_results_CoV002 = count_results_CoV002[order(count_results_CoV002$pvalue),]
summary(count_results_CoV002)
head(count_results_CoV002)
# HISTOGRAM
pvals = count_results_CoV002["pvalue"]
hist(
pvals[, 1],
prob = TRUE,
col = "black",
border = "white",
xlab = "scores",
breaks = 100
)
box(bty = "l")
# Draw density function (assuming normal dist)
score_mean = mean(pvals[, 1])
score_sd   = sd(pvals[, 1])
curve(
dnorm(x, mean = score_mean, sd = score_sd),
add = TRUE,
col = "red",
lwd = 2
)
# Let's take a look to some genes
# count_mat_28v0["ENSG00000128567.16_PODXL",]
# count_mat_28v0["ENSG00000185559.14_DLK1",]
tbl_merge = merge(svRNA184.mock, svRNA184.RSV, by="row.names", all=TRUE)
rownames(tbl_merge) <- tbl_merge[,1] # First column contains the row names
tbl_merge = tbl_merge %>% select(-contains(c("Row.names"))) # DROP extra data
print(head(tbl_merge))
# Conteos
aux_classes = rep(0, times = ncol(tbl_merge)) # CLASSIFY infected samples as 0s
aux_classes[grep(pattern = "mock", x = colnames(tbl_merge))] = 1 # and mocks as 1s
aux_classes
colnames(tbl_merge)
count_results_svRNA184 = DESeq_func(matrix_c = tbl_merge, classes_c = aux_classes)
count_results_svRNA184 = count_results_svRNA184[order(count_results_svRNA184$pvalue),]
summary(count_results_svRNA184)
head(count_results_svRNA184)
# HISTOGRAM
pvals = count_results_svRNA184["pvalue"]
hist(
pvals[, 1],
prob = TRUE,
col = "black",
border = "white",
xlab = "scores",
breaks = 100
)
box(bty = "l")
# Draw density function (assuming normal dist)
score_mean = mean(pvals[, 1])
score_sd   = sd(pvals[, 1])
curve(
dnorm(x, mean = score_mean, sd = score_sd),
add = TRUE,
col = "red",
lwd = 2
)
# Let's take a look to some genes
# count_mat_28v0["ENSG00000128567.16_PODXL",]
# count_mat_28v0["ENSG00000185559.14_DLK1",]
tbl_merge = merge(X3_9_mock, X3_9_wt, by="row.names", all=TRUE)
rownames(tbl_merge) <- tbl_merge[,1] # First column contains the row names
tbl_merge = tbl_merge %>% select(-contains(c("Row.names"))) # DROP extra data
print(head(tbl_merge))
# Conteos
aux_classes = rep(0, times = ncol(tbl_merge)) # CLASSIFY infected samples as 0s
aux_classes[grep(pattern = "mock", x = colnames(tbl_merge))] = 1 # and mocks as 1s
aux_classes
colnames(tbl_merge)
count_results_X3_9 = DESeq_func(matrix_c = tbl_merge, classes_c = aux_classes)
count_results_X3_9 = count_results_X3_9[order(count_results_X3_9$pvalue),]
summary(count_results_X3_9)
head(count_results_X3_9)
# HISTOGRAM
pvals = count_results_X3_9["pvalue"]
hist(
pvals[, 1],
prob = TRUE,
col = "black",
border = "white",
xlab = "scores",
breaks = 100
)
box(bty = "l")
# Draw density function (assuming normal dist)
score_mean = mean(pvals[, 1])
score_sd   = sd(pvals[, 1])
curve(
dnorm(x, mean = score_mean, sd = score_sd),
add = TRUE,
col = "red",
lwd = 2
)
# Let's take a look to some genes
# count_mat_28v0["ENSG00000128567.16_PODXL",]
# count_mat_28v0["ENSG00000185559.14_DLK1",]
plotMA(count_results_CoV002, main = "CoV002")
plotMA(count_results_SARS004, main = "SARS004")
plotMA(count_results_svRNA184, main = "svRNA184")
plotMA(count_results_X3_9, main = "X3_9")
heatmap(as.matrix(datos_covid))
boxplot(log10(datos_covid), range=0, las=2)
