aproximaciones <- c("x" = x, "Approx" = yi)
for(i in 1:(4/h)){
yreal <- eval(y)
y1 <- eval(f.x.y)
y.temp <- yi
yi <- yi + h*y1
x <- x + h
y2 <- eval(f.x.y)
yi <- y.temp  + (y1 + y2)*h*0.5
aproximaciones <- rbind(aproximaciones, c(x, yi))
}
print(aproximaciones)
x <- seq(0,4,0.01)
yreal <- eval(y)
plot(x,yreal ,
ylim = c(min(c(aproximaciones[,2],yreal)),
max(c(aproximaciones[,2],yreal))),
type = "l", col = "red")
points(seq(0,4,h),aproximaciones[,2], col = "blue", pch = 17)
f.x.y <- expression(log(x))
y <- expression(1/x)
h=0.25
yi <- 1
x <- 0
aproximaciones <- c("x" = x, "Approx" = yi)
for(i in 1:(4/h)){
yreal <- eval(y)
y1 <- eval(f.x.y)
y.temp <- yi
yi <- yi + h*y1
x <- x + h
y2 <- eval(f.x.y)
yi <- y.temp  + (y1 + y2)*h*0.5
aproximaciones <- rbind(aproximaciones, c(x, yi))
}
print(aproximaciones)
x <- seq(0,4,0.01)
yreal <- eval(y)
plot(x,yreal ,
ylim = c(min(c(aproximaciones[,2],yreal)),
max(c(aproximaciones[,2],yreal))),
type = "l", col = "red")
points(seq(0,4,h),aproximaciones[,2], col = "blue", pch = 17)
y <- expression(1/x)
yreal <- eval(y)
f.x.y <- expression(log(x))
y <- expression(1/x)
h=0.25
# ODES
{
yi <- 1
x <- 0
aproximaciones <- c("x" = x, "Approx" = yi)
for(i in 1:(4/h)){
yi <- yi + h*eval(f.x.y)
x <- x + h
aproximaciones <- rbind(aproximaciones, c(x, yi))
}
print(aproximaciones)
x <- seq(0,4,0.05)
yreal <- eval(y)
plot(x,yreal ,
ylim = c(min(c(aproximaciones[,2],yreal)),
max(c(aproximaciones[,2],yreal))),
type = "l", col = "red")
points(seq(0,4,h),aproximaciones[,2], col = "blue", pch = 17)
}
f.x.y <- expression(log(x))
y <- expression(1/x)
h=0.25
# ODES
{
yi <- 1
x <- 0
aproximaciones <- c("x" = x, "Approx" = yi)
for(i in 1:(4/h)){
yi <- yi + h*eval(f.x.y)
x <- x + h
aproximaciones <- rbind(aproximaciones, c(x, yi))
}
print(aproximaciones)
x <- seq(0,4,0.05)
yreal <- eval(y)
plot(x,yreal ,
ylim = c(min(c(aproximaciones[,2],yreal)),
max(c(aproximaciones[,2],yreal))),
type = "l", col = "red")
points(seq(0,4,h),aproximaciones[,2], col = "blue", pch = 17)
}
f.x.y <- expression(log(x))
y <- expression(1/x)
h=0.25
# Euler
{
yi <- 1
x <- 0
aproximaciones <- c("x" = x, "Approx" = yi)
for(i in 1:(4/h)){
yreal <- eval(y)
y1 <- eval(f.x.y)
y.temp <- yi
yi <- yi + h*y1
x <- x + h
y2 <- eval(f.x.y)
yi <- y.temp  + (y1 + y2)*h*0.5
aproximaciones <- rbind(aproximaciones, c(x, yi))
}
print(aproximaciones)
x <- seq(0,4,0.01)
yreal <- eval(y)
plot(x,yreal ,
ylim = c(min(c(aproximaciones[,2],yreal)),
max(c(aproximaciones[,2],yreal))),
type = "l", col = "red")
points(seq(0,4,h),aproximaciones[,2], col = "blue", pch = 17)
}
f.x.y <- expression(1/x)
y <- expression(log(x))
h=0.25
# ODES
{
yi <- 1
x <- 0
aproximaciones <- c("x" = x, "Approx" = yi)
for(i in 1:(4/h)){
yi <- yi + h*eval(f.x.y)
x <- x + h
aproximaciones <- rbind(aproximaciones, c(x, yi))
}
print(aproximaciones)
x <- seq(0,4,0.05)
yreal <- eval(y)
plot(x,yreal ,
ylim = c(min(c(aproximaciones[,2],yreal)),
max(c(aproximaciones[,2],yreal))),
type = "l", col = "red")
points(seq(0,4,h),aproximaciones[,2], col = "blue", pch = 17)
}
f.x.y <- expression(log(x))
y <- expression(-x + x log(x))
h=0.25
# ODES
{
yi <- 1
x <- 0
aproximaciones <- c("x" = x, "Approx" = yi)
for(i in 1:(4/h)){
yi <- yi + h*eval(f.x.y)
x <- x + h
aproximaciones <- rbind(aproximaciones, c(x, yi))
}
print(aproximaciones)
x <- seq(0,4,0.05)
yreal <- eval(y)
plot(x,yreal ,
ylim = c(min(c(aproximaciones[,2],yreal)),
max(c(aproximaciones[,2],yreal))),
type = "l", col = "red")
points(seq(0,4,h),aproximaciones[,2], col = "blue", pch = 17)
}
y <- expression(-x + x*log(x))
# ODES
{
yi <- 1
x <- 0
aproximaciones <- c("x" = x, "Approx" = yi)
for(i in 1:(4/h)){
yi <- yi + h*eval(f.x.y)
x <- x + h
aproximaciones <- rbind(aproximaciones, c(x, yi))
}
print(aproximaciones)
x <- seq(0,4,0.05)
yreal <- eval(y)
plot(x,yreal ,
ylim = c(min(c(aproximaciones[,2],yreal)),
max(c(aproximaciones[,2],yreal))),
type = "l", col = "red")
points(seq(0,4,h),aproximaciones[,2], col = "blue", pch = 17)
}
# Euler
{
yi <- 1
x <- 0
aproximaciones <- c("x" = x, "Approx" = yi)
for(i in 1:(4/h)){
yreal <- eval(y)
y1 <- eval(f.x.y)
y.temp <- yi
yi <- yi + h*y1
x <- x + h
y2 <- eval(f.x.y)
yi <- y.temp  + (y1 + y2)*h*0.5
aproximaciones <- rbind(aproximaciones, c(x, yi))
}
print(aproximaciones)
x <- seq(0,4,0.01)
yreal <- eval(y)
plot(x,yreal ,
ylim = c(min(c(aproximaciones[,2],yreal)),
max(c(aproximaciones[,2],yreal))),
type = "l", col = "red")
points(seq(0,4,h),aproximaciones[,2], col = "blue", pch = 17)
}
### ODEs
## Euler method
f.x.y <- expression(log(x))
y <- expression(-x + x*log(x))
upperBound = 10
h <- 0.5
{
yi <- 1
x <- 0.001
aproximaciones <- c("x" = x, "Approx" = yi)
for(i in 1:(upperBound/h)){
yi <- yi + h*eval(f.x.y)
x <- x + h
aproximaciones <- rbind(aproximaciones, c(x, yi))
}
print(aproximaciones)
x <- seq(0,upperBound,h)
yreal <- eval(y)
plot(x,yreal)
points(aproximaciones[,1],aproximaciones[,2], col = "blue", pch = 17)
}
x <- seq(0,4,0.5)
x
#
# install.packages("deSolve")
library (deSolve)
model <- function(x, y, parms ){
with(as.list(c(y,parms)), {
dy = (-2*(x^3)) + (12*(x^2)) - (20*x) + 8.5
list(dy)
})
}
# Initial condition
y <- c(y = 1)
parms <- c()
x <- seq(0,4,0.5)
out <- ode( y, times = x, model, parms )
plot(out)
y <- expression((-0.5*(x^4)) + (4*(x^3)) - (10*(x^2)) + (8.5*x) + 1 )
x <- seq(0,4,0.01)
yreal <- eval(y)
lines(seq(0,4,0.01),yreal, col = "red", pch = 17)
model3 <- function(t,y,parms){
with(as.list(c(y,parms)), {
dy1 = ((I2 - I3)/I1)*y[2]*y[3]
dy2 = ((I3 - I1)/I2)*y[1]*y[3]
dy3 = ((I1 - I2)/I3)*y[2]*y[1]
list(c(dy1,dy2,dy3))
})
}
# Initial conditions:
# y1(0) = 1, y2(0) = 0, y3(0) = 0.9
yini <- c(y1 = 1, y2 = 0, y3 = 0.9)
# Constants:
parms <- c(I1 = 0.5, I2 = 2, I3 = 3)
# Independent variable
times <- seq(0,20,0.01)
# ODE
out3 <- ode(yini, times, model3, parms)
head(out3)
exprs <- expression(x^3)
# "x"
dy.dx <- deriv(exprs, "x")
dy.dx
x <- 0:10
eval(dy.dx)
# Multivariate
f.x.y <- expression(x^2 + y^2)
gradient.f.x.y <- deriv(f.x.y, c("x","y"))
gradient.f.x.y
# Other way to do it
D(f.x.y, "x" )
D(f.x.y, "y" )
x <- 2
y <- 1
eval(gradient.f.x.y)
deriv( f.x.y, c("x","y"), func = TRUE)
exprs <- expression(x^3)
d.dx <- D(exprs, "x")
d2.dx2 <- deriv(d.dx, "x")
exprs <- expression(x^3)
d.dx <- D(exprs, "x")
d2.dx2 <- D(d.dx, "x")
d3.dx3 <- deriv(d2.dx2, "x")
f.x.y <- expression(x^2 + y^2)
d2.f.x.y <- deriv(f.x.y, c("x", "y"), hessian = T)
ODE= "y-x^2+1"
as.function(ODE)
as.factor(ODE)
as.numeric(ODE)
?as.factor
shiny::runApp('C:/Git/MNT_ITESM_courses/1.1.Computacion_Aplicada/MidtermExam/MidtermExam_ShinyApp')
?gsub
&pi
pi
?substring()
runApp('C:/Users/Bru/Downloads/taylor/taylor')
runApp('C:/Users/Bru/Downloads/taylor/taylor')
A <- matrix(0,4,5)
A
A[1,1:2] <- c(a[1]-a[2]*p,a[2])
chfun <- function (a)
{
a <- gsub("sqrt","&radic;",a)
a <- gsub("pi","&pi;",a)
a <- gsub("^x","<sup>x</sup>",a,fixed=TRUE)
a <- gsub("^sin(x)","<sup>sin(x)</sup>",a,fixed=TRUE)
a <- gsub("^cos(x)","<sup>cos(x)</sup>",a,fixed=TRUE)
a <- gsub("^tan(x)","<sup>tan(x)</sup>",a,fixed=TRUE)
a <- gsub("^asin(x)","<sup>asin(x)</sup>",a,fixed=TRUE)
a <- gsub("^acos(x)","<sup>acos(x)</sup>",a,fixed=TRUE)
a <- gsub("^atan(x)","<sup>atan(x)</sup>",a,fixed=TRUE)
a <- gsub("^log(x)","<sup>log(x)</sup>",a,fixed=TRUE)
a <- gsub("^(-1)","<sup>-1</sup>",a,fixed=TRUE)
a <- gsub("^(-2)","<sup>-2</sup>",a,fixed=TRUE)
a <- gsub("^(-3)","<sup>-3</sup>",a,fixed=TRUE)
m <- nchar(a)
i <- 0
repeat {
i <- i+1
if(i>100) break
if(substring(a,i,i)=="^") {
if(substring(a,i+1,i+1)=="(") {
k <- i+1
np <- 0
txt <- ""
repeat {
k <- k+1
txt <- c(txt,substring(a,k,k))
if(substring(a,k,k)=="(") np <- np+1
if(substring(a,k,k)==")" & np==0) break
if(k>100) break
}
txt <- paste(txt,collapse="")
txt <- substring(txt,1,nchar(txt)-1)
a <- paste(substring(a,1,i-1),"<sup>",txt,"</sup>",substring(a,k+1,m),sep="")
}
else {
k <- i
repeat {
k <- k+1
if(is.na(as.numeric(substring(a,k,k)))) break
if(k>100) break
}
k <- k-1
a <- paste(substring(a,1,i-1),"<sup>",substring(a,i+1,k),"</sup>",substring(a,k+1,m),collapse="")
}
i <- i+8
m <- m+8
}
if(i==m) break
}
a
}
poly <- function(a,p) {
A <- matrix(0,4,5)
A[1,1:2] <- c(a[1]-a[2]*p,a[2])
A[2,1:3] <- A[1,1:3]+a[3]*c(p^2,-2*p,1)
A[3,1:4] <- A[2,1:4]+a[4]*c(p^3,-3*p^2,3*p^2,1)
A[4,] <- A[3,]+a[5]*c(p^4,-4*p^3,6*p^2,-4*p,1)
A
}
data <- reactive({
x <- seq(input$from,input$to,length=npoints)
if(input$k==0) i <- nmult*25
else i <- nmult*input$k
p <- x[i]
h <- x[2]-x[1]
f<-function(x) {
eval(parse(text=input$fun))
}
y <- f(x)
p0 <- y[i]
p1 <- (y[i+1]-y[i])/h
p2 <- (y[i-1]-2*y[i]+y[i+1])/h^2
p3 <- (y[i+2]-3*y[i+1]+3*y[i]-y[i-1])/h^3
p4 <- (y[i+2]-4*y[i+1]+6*y[i]-4*y[i-1]+y[i-2])/h^4
yr <- c(min(y)-(max(y)-min(y)/3),max(y)+(max(y)-min(y)/3))
list(cbind(x,y),c(p0,p1,p2,p3,p4),p,yr)
})
x <- data()[[1]][,1]
y <- data()[[1]][,2]
trms=2
seq(1,trms,1)
trms=5
seq(1,trms,1)
seq(1,trms,2.5)
?D
runApp('C:/Git/MNT_ITESM_courses/1.1.Computacion_Aplicada/MidtermExam/MidtermExam_ShinyApp')
fctn="sin(x^2)"
eval(parse(text=fctn))
chfun <- function (a)
{
a <- gsub("sqrt","&radic;",a)
a <- gsub("pi","&pi;",a)
a <- gsub("^x","<sup>x</sup>",a,fixed=TRUE)
a <- gsub("^sin(x)","<sup>sin(x)</sup>",a,fixed=TRUE)
a <- gsub("^cos(x)","<sup>cos(x)</sup>",a,fixed=TRUE)
a <- gsub("^tan(x)","<sup>tan(x)</sup>",a,fixed=TRUE)
a <- gsub("^asin(x)","<sup>asin(x)</sup>",a,fixed=TRUE)
a <- gsub("^acos(x)","<sup>acos(x)</sup>",a,fixed=TRUE)
a <- gsub("^atan(x)","<sup>atan(x)</sup>",a,fixed=TRUE)
a <- gsub("^log(x)","<sup>log(x)</sup>",a,fixed=TRUE)
a <- gsub("^(-1)","<sup>-1</sup>",a,fixed=TRUE)
a <- gsub("^(-2)","<sup>-2</sup>",a,fixed=TRUE)
a <- gsub("^(-3)","<sup>-3</sup>",a,fixed=TRUE)
m <- nchar(a)
i <- 0
repeat {
i <- i+1
if(i>100) break
if(substring(a,i,i)=="^") {
if(substring(a,i+1,i+1)=="(") {
k <- i+1
np <- 0
txt <- ""
repeat {
k <- k+1
txt <- c(txt,substring(a,k,k))
if(substring(a,k,k)=="(") np <- np+1
if(substring(a,k,k)==")" & np==0) break
if(k>100) break
}
txt <- paste(txt,collapse="")
txt <- substring(txt,1,nchar(txt)-1)
a <- paste(substring(a,1,i-1),"<sup>",txt,"</sup>",substring(a,k+1,m),sep="")
}
else {
k <- i
repeat {
k <- k+1
if(is.na(as.numeric(substring(a,k,k)))) break
if(k>100) break
}
k <- k-1
a <- paste(substring(a,1,i-1),"<sup>",substring(a,i+1,k),"</sup>",substring(a,k+1,m),collapse="")
}
i <- i+8
m <- m+8
}
if(i==m) break
}
a
}
chfun <- function (a)
{
a <- gsub("sqrt","&radic;",a)
a <- gsub("pi","&pi;",a)
a <- gsub("^x","<sup>x</sup>",a,fixed=TRUE)
a <- gsub("^sin(x)","<sup>sin(x)</sup>",a,fixed=TRUE)
a <- gsub("^cos(x)","<sup>cos(x)</sup>",a,fixed=TRUE)
a <- gsub("^tan(x)","<sup>tan(x)</sup>",a,fixed=TRUE)
a <- gsub("^asin(x)","<sup>asin(x)</sup>",a,fixed=TRUE)
a <- gsub("^acos(x)","<sup>acos(x)</sup>",a,fixed=TRUE)
a <- gsub("^atan(x)","<sup>atan(x)</sup>",a,fixed=TRUE)
a <- gsub("^log(x)","<sup>log(x)</sup>",a,fixed=TRUE)
a <- gsub("^(-1)","<sup>-1</sup>",a,fixed=TRUE)
a <- gsub("^(-2)","<sup>-2</sup>",a,fixed=TRUE)
a <- gsub("^(-3)","<sup>-3</sup>",a,fixed=TRUE)
m <- nchar(a)
i <- 0
repeat {
i <- i+1
if(i>100) break
if(substring(a,i,i)=="^") {
if(substring(a,i+1,i+1)=="(") {
k <- i+1
np <- 0
txt <- ""
repeat {
k <- k+1
txt <- c(txt,substring(a,k,k))
if(substring(a,k,k)=="(") np <- np+1
if(substring(a,k,k)==")" & np==0) break
if(k>100) break
}
txt <- paste(txt,collapse="")
txt <- substring(txt,1,nchar(txt)-1)
a <- paste(substring(a,1,i-1),"<sup>",txt,"</sup>",substring(a,k+1,m),sep="")
}
else {
k <- i
repeat {
k <- k+1
if(is.na(as.numeric(substring(a,k,k)))) break
if(k>100) break
}
k <- k-1
a <- paste(substring(a,1,i-1),"<sup>",substring(a,i+1,k),"</sup>",substring(a,k+1,m),collapse="")
}
i <- i+8
m <- m+8
}
if(i==m) break
}
a
}
View(chfun)
shiny::runApp()
runApp()
runApp()
?xlim
?taylorPlot
?Plot
?plot
runApp()
?xlim
runApp()
