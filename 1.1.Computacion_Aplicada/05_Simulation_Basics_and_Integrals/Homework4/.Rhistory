# # riemann left sum
# for (i in 1:n) {
#   x <- b - i*h;
#   upper.sum <- upper.sum + f(x);
# }
# upper.sum <- h*upper.sum;
# print/get riemann sum
cat(sprintf("The true value is between %f and %f.\n",
as.double(lower.sum),
as.double(upper.sum)));
return(c(lower.sum,upper.sum));
}
# -----
f4 <- function(x) {
res = 4/(1+x^2);
return(res);
}
# -----
riemann_sum(f4,0,1,10)
riemann_sum_2d <- function(f,a,b,n) {
# initialize values
lower.sum <- 0;
upper.sum <- 0;
hx <- (b - a)/n;
hy <- (b - a)/n;
# riemann right sum
for (i in n:1) {
x <- a + i*h;
for (j in n:1) {
y <- a + j*h;
lower.sum <- lower.sum + f(x,y);
}
lower.sum <- h*lower.sum;
}
lower.sum <- h*lower.sum;
# # riemann left sum
# for (i in 1:n) {
#   x <- b - i*h;
#   upper.sum <- upper.sum + f(x);
# }
# upper.sum <- h*upper.sum;
# print/get riemann sum
cat(sprintf("The true value is between %f and %f.\n",
as.double(lower.sum),
as.double(upper.sum)));
return(c(lower.sum,upper.sum));
}
# -----
f4 <- function(x,y) {
res = exp((x+y)^2);
return(res);
}
# -----
riemann_sum_2d(f4,0,1,10)
riemann_sum_2d <- function(f,a,b,n) {
# initialize values
lower.sum <- 0;
upper.sum <- 0;
hx <- (b - a)/n;
hy <- (b - a)/n;
# riemann right sum
for (i in n:1) {
x <- a + i*hx;
for (j in n:1) {
y <- a + j*hy;
lower.sum <- lower.sum + f(x,y);
}
lower.sum <- hy*lower.sum;
}
lower.sum <- hx*lower.sum;
# # riemann left sum
# for (i in 1:n) {
#   x <- b - i*h;
#   upper.sum <- upper.sum + f(x);
# }
# upper.sum <- h*upper.sum;
# print/get riemann sum
cat(sprintf("The true value is between %f and %f.\n",
as.double(lower.sum),
as.double(upper.sum)));
return(c(lower.sum,upper.sum));
}
# -----
f4 <- function(x,y) {
res = exp((x+y)^2);
return(res);
}
# -----
riemann_sum_2d(f4,0,1,10)
riemann_sum_2d(f4,0,1,10000)
riemann_sum_2d <- function(f,a,b,n) {
# initialize values
lower.sum <- 0;
upper.sum <- 0;
hx <- (b - a)/n;
hy <- (b - a)/n;
# riemann right sum
for (i in n:1) {
x <- a + i*hx;
for (j in n:1) {
y <- a + j*hy;
lower.sum <- lower.sum + f(x,y);
}
#lower.sum <- hy*lower.sum;
}
#lower.sum <- hx*lower.sum;
# # riemann left sum
# for (i in 1:n) {
#   x <- b - i*h;
#   upper.sum <- upper.sum + f(x);
# }
# upper.sum <- h*upper.sum;
# print/get riemann sum
cat(sprintf("The true value is between %f and %f.\n",
as.double(lower.sum),
as.double(upper.sum)));
return(c(lower.sum,upper.sum));
}
# -----
f4 <- function(x,y) {
res = exp((x+y)^2);
return(res);
}
# -----
riemann_sum_2d(f4,0,1,10000)
riemann_sum_2d <- function(f,a,b,n) {
# initialize values
lower.sum <- 0;
upper.sum <- 0;
hx <- (b - a)/n;
hy <- (b - a)/n;
# riemann right sum
for (i in n:1) {
x <- a + i*hx;
for (j in n:1) {
y <- b + j*hy;
lower.sum <- lower.sum + f(x,y);
}
lower.sum <- hy*lower.sum;
}
lower.sum <- hx*lower.sum;
# # riemann left sum
# for (i in 1:n) {
#   x <- b - i*h;
#   upper.sum <- upper.sum + f(x);
# }
# upper.sum <- h*upper.sum;
# print/get riemann sum
cat(sprintf("The true value is between %f and %f.\n",
as.double(lower.sum),
as.double(upper.sum)));
return(c(lower.sum,upper.sum));
}
# -----
f4 <- function(x,y) {
res = exp((x+y)^2);
return(res);
}
# -----
riemann_sum_2d(f4,0,1,10000)
riemann_sum_2d <- function(f,a,b,n) {
# def riemann(a, b, dx):
#   if a > b:
#   a,b = b,a
#   # dx = (b-a)/n
#   n = int((b - a) / dx)
#   s = 0.0
#   x = a
#   for i in xrange(n):
#     f_i = (x + 3.0) * x + 4.0
#   s += f_i
#   x += dx
#   return s * dx
# initialize values
lower.sum <- 0;
upper.sum <- 0;
hx <- (b - a)/n;
hy <- (b - a)/n;
# riemann right sum
for (i in n:1) {
x <- x + hx;
for (j in n:1) {
y <- y + hy;
lower.sum <- lower.sum + f(x,y);
}
lower.sum <- hy*lower.sum;
}
lower.sum <- hx*lower.sum;
# # riemann left sum
# for (i in 1:n) {
#   x <- b - i*h;
#   upper.sum <- upper.sum + f(x);
# }
# upper.sum <- h*upper.sum;
# print/get riemann sum
cat(sprintf("The true value is between %f and %f.\n",
as.double(lower.sum),
as.double(upper.sum)));
return(c(lower.sum,upper.sum));
}
# -----
f4 <- function(x,y) {
res = exp((x+y)^2);
return(res);
}
# -----
riemann_sum_2d(f4,0,1,10000)
riemann_sum_2d <- function(f,a,b,n) {
# def riemann(a, b, dx):
#   if a > b:
#   a,b = b,a
#   # dx = (b-a)/n
#   n = int((b - a) / dx)
#   s = 0.0
#   x = a
#   for i in xrange(n):
#     f_i = (x + 3.0) * x + 4.0
#   s += f_i
#   x += dx
#   return s * dx
# initialize values
lower.sum <- 0;
upper.sum <- 0;
x <- 0;
y <- 0;
hx <- (b - a)/n;
hy <- (b - a)/n;
# riemann right sum
for (i in n:1) {
x <- x + hx;
for (j in n:1) {
y <- y + hy;
lower.sum <- lower.sum + f(x,y);
}
lower.sum <- hy*lower.sum;
}
lower.sum <- hx*lower.sum;
# # riemann left sum
# for (i in 1:n) {
#   x <- b - i*h;
#   upper.sum <- upper.sum + f(x);
# }
# upper.sum <- h*upper.sum;
# print/get riemann sum
cat(sprintf("The true value is between %f and %f.\n",
as.double(lower.sum),
as.double(upper.sum)));
return(c(lower.sum,upper.sum));
}
# -----
f4 <- function(x,y) {
res = exp((x+y)^2);
return(res);
}
# -----
riemann_sum_2d(f4,0,1,10000)
riemann_sum_2d <- function(f,a,b,n) {
# def riemann(a, b, dx):
#   if a > b:
#   a,b = b,a
#   # dx = (b-a)/n
#   n = int((b - a) / dx)
#   s = 0.0
#   x = a
#   for i in xrange(n):
#     f_i = (x + 3.0) * x + 4.0
#     s += f_i
#     x += dx
#   return s * dx
# initialize values
dx = (b-a)/n
s = 0.0
x = a
# riemann right sum
for (i in 1:n) {
f_i = f(x)
s = s + f_i
x = x + dx
}
s <- s * dx
# # riemann left sum
# for (i in 1:n) {
#   x <- b - i*h;
#   upper.sum <- upper.sum + f(x);
# }
# upper.sum <- h*upper.sum;
# print/get riemann sum
cat(sprintf("The true value is around %f.\n",
as.double(s)));
return(s);
}
# -----
f4 <- function(x,y) {
res = exp((x+y)^2);
return(res);
}
# -----
riemann_sum_2d(f2,0,1,10000)
f2 <- function(x) {
res = 4/(1+x^2);
return(res);
}
riemann_sum_2d(f2,0,1,10000)
riemann_sum_2d <- function(f,a,b,c,d,n) {
# def riemann(a, b, dx):
#   if a > b:
#   a,b = b,a
#   # dx = (b-a)/n
#   n = int((b - a) / dx)
#   s = 0.0
#   x = a
#   for i in xrange(n):
#     f_i = (x + 3.0) * x + 4.0
#     s += f_i
#     x += dx
#   return s * dx
# initialize values
dx = (b-a)/n
s = 0.0
x = a
dy = (d-c)/n
s = 0.0
y = c
# riemann 2D sum
for (i in 1:n) {
for (j in 1:n) {
f_i = f(x,y)
s = s + f_i
y = y + dy
}
s <- s * dy
x = x + dx
}
s <- s * dx
# print/get riemann sum
cat(sprintf("The true value is around %f.\n",
as.double(s)));
return(s);
}
# -----
f4 <- function(x,y) {
res = exp((x+y)^2);
return(res);
}
# -----
riemann_sum_2d(f4,0,1,10000)
# RIEMANN SUMS 2D FUNCTION
riemann_sum_2d <- function(f,a,b,c,d,n) {
# def riemann(a, b, dx):
#   if a > b:
#   a,b = b,a
#   # dx = (b-a)/n
#   n = int((b - a) / dx)
#   s = 0.0
#   x = a
#   for i in xrange(n):
#     f_i = (x + 3.0) * x + 4.0
#     s += f_i
#     x += dx
#   return s * dx
# initialize values
dx = (b-a)/n
s = 0.0
x = a
dy = (d-c)/n
s = 0.0
y = c
# riemann 2D sum
for (i in 1:n) {
for (j in 1:n) {
f_i = f(x,y)
s = s + f_i
y = y + dy
}
s <- s * dy
x = x + dx
}
s <- s * dx
# print/get riemann sum
cat(sprintf("The true value is around %f.\n",
as.double(s)));
return(s);
}
# -----
f4 <- function(x,y) {
res = exp((x+y)^2);
return(res);
}
# -----
riemann_sum_2d(f4,0,1,0,1,10000)
riemann_sum_2d <- function(f,a,b,c,d,n) {
# def riemann(a, b, dx):
#   if a > b:
#   a,b = b,a
#   # dx = (b-a)/n
#   n = int((b - a) / dx)
#   s = 0.0
#   x = a
#   for i in xrange(n):
#     f_i = (x + 3.0) * x + 4.0
#     s += f_i
#     x += dx
#   return s * dx
# initialize values
dx = (b-a)/n
s = 0.0
x = a
dy = (d-c)/n
s = 0.0
y = c
# riemann 2D sum
for (i in 1:n) {
for (j in 1:n) {
f_i = f(x,y)
s = s + f_i
y = y + dy
}
#s <- s * dy
x = x + dx
}
s <- s * dx * dy
# print/get riemann sum
cat(sprintf("The true value is around %f.\n",
as.double(s)));
return(s);
}
# -----
f4 <- function(x,y) {
res = exp((x+y)^2);
return(res);
}
# -----
riemann_sum_2d(f4,0,1,0,1,10000)
riemann_sum_2d <- function(f,a,b,c,d,nx,ny) {
# def midpoint_double1(f, a, b, c, d, nx, ny):
#   hx = (b - a)/float(nx)
#   hy = (d - c)/float(ny)
#   I = 0
#   for i in range(nx):
#     for j in range(ny):
#       xi = a + hx/2 + i*hx
#       yj = c + hy/2 + j*hy
#       I += hx*hy*f(xi, yj)
#   return I
# initialize values
dx = (b-a)/nx
s = 0.0
x = a
dy = (d-c)/ny
y = c
# riemann 2D sum
for (i in 1:n) {
for (j in 1:n) {
x = a + dx/2 + i*dx
y = c + dy/2 + j*dy
f_i = f(x,y)
s = s + f_i*dx*dy
}
}
# print/get riemann sum
cat(sprintf("The true value is around %f.\n",
as.double(s)));
return(s);
}
# -----
f4 <- function(x,y) {
res = exp((x+y)^2);
return(res);
}
# -----
riemann_sum_2d(f4,0,1,0,1,1000,1000)
riemann_sum_2d <- function(f,a,b,c,d,nx,ny) {
# def midpoint_double1(f, a, b, c, d, nx, ny):
#   hx = (b - a)/float(nx)
#   hy = (d - c)/float(ny)
#   I = 0
#   for i in range(nx):
#     for j in range(ny):
#       xi = a + hx/2 + i*hx
#       yj = c + hy/2 + j*hy
#       I += hx*hy*f(xi, yj)
#   return I
# initialize values
dx = (b-a)/nx
s = 0.0
x = a
dy = (d-c)/ny
y = c
# riemann 2D sum
for (i in 1:nx) {
for (j in 1:ny) {
x = a + dx/2 + i*dx
y = c + dy/2 + j*dy
f_i = f(x,y)
s = s + f_i*dx*dy
}
}
# print/get riemann sum
cat(sprintf("The true value is around %f.\n",
as.double(s)));
return(s);
}
# -----
f4 <- function(x,y) {
res = exp((x+y)^2);
return(res);
}
# -----
riemann_sum_2d(f4,0,1,0,1,1000,1000)
riemann_sum_2d(f4,0,1,0,1,10000,10000)
riemann_sum_2d(f4,0,1,0,1,1000,1000)
riemann_sum_2d(f4,0,1,0,1,1000,10000)
